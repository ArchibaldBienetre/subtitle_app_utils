plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.72'
}
repositories {
    mavenCentral()

    maven {
        url "https://dl.bintray.com/mockito/maven"
    }
}

group 'com.example'
version '1.0.1-SNAPSHOT'

apply plugin: 'maven-publish'
apply plugin: 'jacoco'

kotlin {
    jvm()
    js {
        browser {
        }
        nodejs {
        }
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    linuxX64("linux")
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation group: 'com.google.guava', name: 'guava', version: '29.0-android'

                // CLI:
                implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.2'
                implementation 'ch.qos.logback:logback-classic:1.0.13'
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        linuxMain {
        }
        linuxTest {
        }
    }

    // RG: I learned how to do this here: https://medium.com/@preslavrachev/kotlin-basics-create-executable-kotlin-jars-using-gradle-d17e9a8384b9
    jvmJar {
        manifest {
            attributes "Main-Class": "org.example.subtitles.cli.SimpleCliKt"
        }
        // fat jar
        from { configurations.jvmCompileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    }
}

// ### Test Coverage + Coverage Verification ###
// inspired by https://stackoverflow.com/q/45464138/1143126
// and https://stackoverflow.com/a/49161924/1143126

task jacocoTestReport(type: JacocoReport) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    sourceDirectories.setFrom(files([
            "${projectDir}/src/commonMain/kotlin",
            "${projectDir}/src/jvmMain/kotlin"
    ]))
    classDirectories.setFrom(files([
            fileTree(dir: "${buildDir}/classes", excludes: ['**/test/**'])
    ]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/*Test.exec"
    ]))
}


task jacocoTestCoverageVerification(type: JacocoCoverageVerification) {
    violationRules {
        rule {
            element = 'CLASS'
            // whitelist - not recognized properly by JaCoCo
            excludes = ['*.DefaultImpls', '*.Companion', '*.Factory', '*.1',
                        'org.example.subtitles.modification.SubtitlesTransformer',
                        'org.example.subtitles.cli.SimpleCliKt',
                        'org.example.subtitles.cli.TimedSubtitlePrinter'
            ]
            includes = ['org.example.*']

            limit {
                minimum = 0.95
            }
        }

        // ## the following have been covered by tests, but test coverage is not properly recognized ## //

        rule {
            element = 'CLASS'
            includes = ['org.example.subtitles.modification.SubtitlesTransformer', '*.Factory']

            limit {
                minimum = 0.83
            }
        }
        rule {
            element = 'CLASS'
            includes = [
                    'org.example.subtitles.serialization.SubtitleReader.DefaultImpls'
            ]

            limit {
                minimum = 0.72
            }
        }
        rule {
            element = 'CLASS'
            includes = [
                    'org.example.subtitles.cli.SimpleCliKt',
            ]

            limit {
                minimum = 0.77
            }
        }
        rule {
            element = 'CLASS'
            includes = [
                    'org.example.subtitles.cli.TimedSubtitlePrinter'
            ]

            limit {
                minimum = 0.69
            }
        }
    }

    sourceDirectories.setFrom(files([
            "${projectDir}/src/commonMain/kotlin",
            "${projectDir}/src/jvmMain/kotlin"
    ]))
    classDirectories.setFrom(files([
            fileTree(dir: "${buildDir}/classes", excludes: ['**/test/**'])
    ]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/*Test.exec"
    ]))
}

tasks.withType(Test).each {
    it.finalizedBy jacocoTestReport
    it.finalizedBy jacocoTestCoverageVerification
}
jacocoTestCoverageVerification.dependsOn jacocoTestReport

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

jvmTest {
    // to still run LearningTest classes, add "-PdoRunLearningTests" to your gradle command
    if (!project.hasProperty('doRunLearningTests')) {
        filter {
            excludeTestsMatching "*LearningTest"
        }
    }
}

