plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.72'
}
repositories {
    mavenCentral()
}
group 'com.example'
version '0.0.1'

apply plugin: 'maven-publish'
apply plugin: 'jacoco'

kotlin {
    jvm()
    js {
        browser {
        }
        nodejs {
        }
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    linuxX64("linux")
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation group: 'com.google.guava', name: 'guava', version: '29.0-android'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        linuxMain {
        }
        linuxTest {
        }
    }

    // RG: I learned how to do this here: https://medium.com/@preslavrachev/kotlin-basics-create-executable-kotlin-jars-using-gradle-d17e9a8384b9
    jvmJar {
        manifest {
        }
        // fat jar
        from { configurations.kotlinCompilerClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    }
}

// ### Test Coverage + Coverage Verification ###
// inspired by https://stackoverflow.com/q/45464138/1143126
// and https://stackoverflow.com/a/49161924/1143126

task jacocoTestReport(type: JacocoReport) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    sourceDirectories.setFrom(files([
            "${projectDir}/src/commonMain/kotlin",
            "${projectDir}/src/jvmMain/kotlin"
    ]))
    classDirectories.setFrom(files([
            fileTree(dir: "${buildDir}/classes", excludes: ['**/test/**'])
    ]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/*Test.exec"
    ]))
}


task jacocoTestCoverageVerification(type: JacocoCoverageVerification) {
    violationRules {
        rule {
            element = 'CLASS'
            // whitelist - not recognized properly by JaCoCo
            excludes = ['*.DefaultImpls', '*.Companion', '*.Factory']
            includes = ['org.example.*']

            limit {
                minimum = 0.90
            }
        }
    }

    sourceDirectories.setFrom(files([
            "${projectDir}/src/commonMain/kotlin",
            "${projectDir}/src/jvmMain/kotlin"
    ]))
    classDirectories.setFrom(files([
            fileTree(dir: "${buildDir}/classes", excludes: ['**/test/**'])
    ]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/*Test.exec"
    ]))
}

tasks.withType(Test).each {
    it.finalizedBy jacocoTestReport
    it.finalizedBy jacocoTestCoverageVerification
}
jacocoTestCoverageVerification.dependsOn jacocoTestReport
