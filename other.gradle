// ### Test Coverage + Coverage Verification ###
// inspired by https://stackoverflow.com/q/45464138/1143126
// and https://stackoverflow.com/a/49161924/1143126

task jacocoTestReport(type: JacocoReport) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    sourceDirectories.setFrom(files([
            "${projectDir}/src/commonMain/kotlin",
            "${projectDir}/src/jvmMain/kotlin"
    ]))
    classDirectories.setFrom(files([
            fileTree(dir: "${buildDir}/classes", excludes: ["**/test/**"])
    ]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/*Test.exec"
    ]))
}


task jacocoTestCoverageVerification(type: JacocoCoverageVerification) {
    violationRules {
        rule {
            element = "CLASS"
            // whitelist - not recognized properly by JaCoCo
            excludes = ["*.DefaultImpls", "*.Companion", "*.Factory", "*.1",
                        "org.example.subtitles.modification.SubtitlesTransformer",
                        "org.example.subtitles.cli.SimpleCliKt",
                        "org.example.subtitles.cli.TimedSubtitlePrinter"
            ]
            includes = ["org.example.*"]

            limit {
                minimum = 0.95
            }
        }

        // ## the following have been covered by tests, but test coverage is not properly recognized ## //

        rule {
            element = "CLASS"
            includes = ["org.example.subtitles.modification.SubtitlesTransformer", "*.Factory"]

            limit {
                minimum = 0.83
            }
        }
        rule {
            element = "CLASS"
            includes = [
                    "org.example.subtitles.serialization.SubtitleReader.DefaultImpls"
            ]

            limit {
                minimum = 0.72
            }
        }
        rule {
            element = "CLASS"
            includes = [
                    "org.example.subtitles.cli.SimpleCliKt",
            ]

            limit {
                minimum = 0.77
            }
        }
        rule {
            element = "CLASS"
            includes = [
                    "org.example.subtitles.cli.TimedSubtitlePrinter"
            ]

            limit {
                minimum = 0.69
            }
        }
    }

    sourceDirectories.setFrom(files([
            "${projectDir}/src/commonMain/kotlin",
            "${projectDir}/src/jvmMain/kotlin"
    ]))
    classDirectories.setFrom(files([
            fileTree(dir: "${buildDir}/classes", excludes: ["**/test/**"])
    ]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/*Test.exec"
    ]))
}

tasks.withType(Test).each {
    it.finalizedBy jacocoTestReport
    it.finalizedBy jacocoTestCoverageVerification
}
jacocoTestCoverageVerification.dependsOn jacocoTestReport

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

jvmTest {
    // to still run LearningTest classes, add "-PdoRunLearningTests" to your gradle command
    if (!project.hasProperty("doRunLearningTests")) {
        filter {
            excludeTestsMatching "*LearningTest"
        }
    }
}

